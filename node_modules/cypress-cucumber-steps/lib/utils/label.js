"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLabelElements = exports.getByLabelText = void 0;
var queries_1 = require("../queries");
var element_1 = require("./element");
var options_1 = require("./options");
/**
 * Get first Cypress element by label text.
 *
 * @param element - Element name.
 * @param text - Label text.
 * @returns - Cypress element.
 * @private
 */
function getByLabelText(element, text) {
    (0, queries_1.When_I_find_element_by_label_text)(text);
    return (0, element_1.getCypressElement)().then(function ($element) {
        var tagName = $element.prop('tagName').toLowerCase();
        // https://developer.mozilla.org/docs/Web/HTML/Element/label
        if (tagName === 'label') {
            var forValue = $element.attr('for');
            if (forValue) {
                return cy.get("#".concat(forValue));
            }
            else {
                return $element.find(element).first();
            }
        }
        // https://developer.mozilla.org/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby
        if ($element.attr('aria-labelledby') === text) {
            return cy.get("#".concat(text));
        }
        // https://developer.mozilla.org/docs/Web/Accessibility/ARIA/Attributes/aria-label
        if (tagName === element && $element.attr('aria-label') === text) {
            return $element;
        }
        throw new Error("Unable to get ".concat(element, " by label text: ").concat(text));
    });
}
exports.getByLabelText = getByLabelText;
/**
 * Get label elements.
 *
 * @param text - Label text.
 * @param selector - Pseudo selector.
 * @returns - Cypress element.
 * @private
 */
function getLabelElements(text, selector, options) {
    var selectors = [
        "label:contains(".concat(JSON.stringify(text), ")"),
        "[aria-labelledby=".concat(JSON.stringify(text), "]"),
        "[aria-label=".concat(JSON.stringify(text), "]"),
    ];
    if (selector) {
        selectors = selectors.map(function (label) { return "".concat(label, ":").concat(selector); });
    }
    return cy.get(selectors.join(','), (0, options_1.getOptions)(options));
}
exports.getLabelElements = getLabelElements;
//# sourceMappingURL=label.js.map